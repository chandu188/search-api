openapi: '3.0.0'

info:
  title:  Search API
  description:  An API serving product information.
  version: "1.0.0"
  contact:
    name: PDP
    email: team@gfg.com
  x-audience: company-internal
  
servers:
  - url: http://localhost:8080
    description: development server
  
paths:
  /products:
    get:
      summary: Returns articles matching the given search criteria.
      description: |
        This endpoint returns the articles matching the given search criteria
      parameters:
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/offset"
        - $ref: "#/components/parameters/filter"
        - $ref: "#/components/parameters/sort_by"
      responses:
        '200':
          description: A sSKU fitting the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOfProducts'
        '404':
          description: No recommendation
          content:
            application/json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: 'https://opensource.zalando.com/problem/schema.yaml#/Problem'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://token.services.auth.zalando.com/oauth2/access_token?realm=/services
          x-tokenInfoUrl: https://info.services.auth.zalando.com/oauth2/tokeninfo
          scopes:
            uid: Unique identifier of the user accessing the service.

  parameters:
    query:
      name: q
      in: query
      description: The text to search for in the detial section of the product.
      required: false
      schema:
        type: string
        format: string
      

    filter:
      name: filter
      in: query
      description: colon separated key value pair to filter the products based on key and value.
      required: false
      schema:
        type: string
        format: string
        example: filter=brand:brand_name

    limit:
      name: limit
      in: query
      description: number of the products to be limited to per page.
      required: false
      schema:
        type: integer
        format: int32
        example: 3165
        default: 10

    offset:
      name: offset
      in: query
      description: the offset number from which the products to be displayed
      required: false
      schema:
        type: integer
        format: int32
        example: 2
        default: 0
    
    sort_by:
      name: sort_by
      in: query
      description: key value (key:value) pairs separated by comma using which results are sorted.
      required: false
      schema:
        type: string
        format: int32
        example: sku:asc

  schemas:
    Product:
      type: object
      properties:
        title:
          type: string
          description: title of the product/article.
        sku:
          type: string
          description: "Simple SKU"
        price:
          type: number
          format: double
          description: price of the article
        stock:
          type: integer
          format: int32
          description: stock of the article
        brand:
          type: string
          description: brand name of the article
      required: 
        - title
        - price
        - stock
        - brand
        - sku
    
    PageOfProducts:
      type: object
      properties:
        total_items:
          type: integer
          format: int32
          description: number of products that match the search criteria
          example: 33
        page_number:
          type: integer
          format: int32
          description: number of the page
          example: 2
        page_size:
          type: integer
          format: int32
          description: number of elements in the page
          example: 10
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Product"
          description: List of products
      required:
        - total_items
        - page_number
        - page_size
        - reviews
    
    Error:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          example: http://httpstatus.es/503
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.
      required:
        - type
        - title
        - status